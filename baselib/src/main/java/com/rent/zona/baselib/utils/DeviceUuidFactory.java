package com.rent.zona.baselib.utils;

import android.Manifest;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.os.Build;
import android.provider.Settings;
import android.support.v4.app.ActivityCompat;
import android.telephony.TelephonyManager;
import android.text.TextUtils;

import java.util.UUID;

/**
 * @name：
 * @author： liuyun
 * @phone： 15723310658
 * @createTime： 2017/8/22
 * @modifyTime： 2017/8/22
 * @explain：说明
 */


public class DeviceUuidFactory {
    protected static final String PREFS_FILE = "device_id.xml";
    protected static final String PREFS_DEVICE_ID = "device_id";
//    protected static UUID uuid;
    protected static String uuid;

    public DeviceUuidFactory(Context context) {
        if( uuid ==null ) {
            synchronized (DeviceUuidFactory.class) {
                if( uuid == null) {
                    final SharedPreferences prefs = context.getSharedPreferences( PREFS_FILE, 0);
                    final String id = prefs.getString(PREFS_DEVICE_ID, null );
                    if (id != null) {
                        // Use the ids previously computed and stored in the prefs file
//                        uuid = UUID.fromString(id);
                        uuid=id;
                    } else {

                        /**
                         * 首先读取deviceId
                         */
                        if(checkReadPhone(context)){
                            final String deviceId;
                            final String PRE;
                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                                PRE="IMEI_";
                                deviceId = ((TelephonyManager) context.getSystemService( Context.TELEPHONY_SERVICE )).getImei();
                            }else{
                                PRE="DEVICE_ID_";
                                deviceId = ((TelephonyManager) context.getSystemService( Context.TELEPHONY_SERVICE )).getDeviceId();
                            }
                            if(!TextUtils.isEmpty(deviceId) && !"000000000000000".equals(deviceId)){
                                uuid=PRE+deviceId;
//                                try {
//                                    uuid=UUID.nameUUIDFromBytes(deviceId.getBytes("utf8"));
//                                } catch (UnsupportedEncodingException e) {
//                                }
                            }
                        }
                        String serial;
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                            serial= Build.getSerial();
                        }else{
                            serial= Build.SERIAL;
                        }
                        if(TextUtils.isEmpty(uuid) && !"unknown".equals(serial)){
                            uuid ="SERIAL_"+serial;
//                            try {
//                                uuid = UUID.nameUUIDFromBytes(serial.getBytes());
//                            }catch (Exception e){
//                            }
                        }
                        if(TextUtils.isEmpty(uuid)){
                            final String androidId = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);
                            if (!"9774d56d682e549c".equals(androidId)) {
                                uuid="ANDROID_ID_"+androidId;
                            }

//                            try {
//                                if (!"9774d56d682e549c".equals(androidId)) {
//                                    uuid = UUID.nameUUIDFromBytes(androidId.getBytes("utf8"));
//                                }
//                            } catch (UnsupportedEncodingException e) {
//                            }
                        }
                        if(TextUtils.isEmpty(uuid)){
//                            uuid =UUID.randomUUID();
                            uuid ="UUID_"+ UUID.randomUUID();
//                            LogHelper.si("设备uuid","UUID.randomUUID()="+uuid.toString());
                        }



                        // Write the value out to the prefs file
                        prefs.edit().putString(PREFS_DEVICE_ID, uuid.toString() ).commit();
                    }
                }
            }
        }
    }
    /**
     * Returns a unique UUID for the current android device.  As with all UUIDs, this unique ID is "very highly likely"
     * to be unique across all Android devices.  Much more so than ANDROID_ID is.
     *
     * The UUID is generated by using ANDROID_ID as the base key if appropriate, falling back on
     * TelephonyManager.getDeviceID() if ANDROID_ID is known to be incorrect, and finally falling back
     * on a random UUID that's persisted to SharedPreferences if getDeviceID() does not return a
     * usable value.
     *
     * In some rare circumstances, this ID may change.  In particular, if the device is factory reset a new device ID
     * may be generated.  In addition, if a user upgrades their phone from certain buggy implementations of Android 2.2
     * to a newer, non-buggy version of Android, the device ID may change.  Or, if a user uninstalls your app on
     * a device that has neither a proper Android ID nor a Device ID, this ID may change on reinstallation.
     *
     * Note that if the code falls back on using TelephonyManager.getDeviceId(), the resulting ID will NOT
     * change after a factory reset.  Something to be aware of.
     *
     * Works around a bug in Android 2.2 for many devices when using ANDROID_ID directly.
     *
     * @see http://code.google.com/p/android/issues/detail?id=10603
     *
     * @return a UUID that may be used to uniquely identify your device for most purposes.
     */
//    public UUID getDeviceUuid() {
//        return uuid;
//    }
    public String getDeviceUuid() {
        return uuid;
    }
    private boolean checkReadPhone(Context context){
        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.READ_PHONE_STATE)
                == PackageManager.PERMISSION_GRANTED) {
            return true;
        }
        return false;
    }
}